//*********************************************************************************************************************************
//
// PROJECT:							Astronomy Class Library
// FILE:								CHDBAstrometry
// SUBSYSTEM:						Astronomical HDB classes
// LANGUAGE:						C++
// TARGET OS:						None.
// LIBRARY DEPENDANCE:	SCL, CFitsIO, boost.
// NAMESPACE:						ACL
// AUTHOR:							Gavin Blakeman (GGB)
// LICENSE:             GPLv2
//
//                      Copyright 2011-2018 Gavin Blakeman.
//                      This file is part of the Astronomy Class Library (ACL)
//
//                      ACL is free software: you can redistribute it and/or modify it under the terms of the GNU General
//                      Public License as published by the Free Software Foundation, either version 2 of the License, or
//                      (at your option) any later version.
//
//                      ACL is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
//                      implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
//                      for more details.
//
//                      You should have received a copy of the GNU General Public License along with ACL.  If not,
//                      see <http://www.gnu.org/licenses/>.
//
// OVERVIEW:						A number of classes supporting file IO of astronomical data including images.
//											The classes are designed to present a single interface to the other astro library
//											classes while supporting several different file types.
//
//											File types supported for input are:   FITS
//																								            SBIG image files
//                                                            DNG Files
//                                                            RAW Files
//                      File types supported for output are": FITS
//
//                      The CAstroFile class is modelled around the FITS file format and is designed to work seamlessly with FITS
//                      files. While opening other types of files is supported, some information will be created on the fly.
//                      To ensure that all information generated by image manipulation is saved correctly, the information must
//                      be saved in the FITS format. Information will be lost if it is saved in any other format.
//
//                      The CAstroFile class also provides some observation management functionality as there are keywords that
//                      are automatically linked to observation information.
//
//
// CLASSES INCLUDED:		CAstrometryHDB  - Class to encapsulate Astrometry Data
//
// CLASS HIERARCHY:     CHDB
//                        - CImageHDB
//                        - CHDBAsciiTable
//                          - CAstrometryHDB
//                          - CHDBPhotometry
//                        - CHDBBinTable
//
// HISTORY:             2015-09-22 GGB - astroManager 2015.09 release
//                      2013-09-30 GGB - astroManager 2013.09 release.
//                      2013-08-10 GGB - Changed storage table in FITS file from Ascii table to Binary table.
//                      2013-03-22 GGB - astroManager 2013.03 release.
//                      2013-02-01 GGB - Moved class from HDB.h
//
//*********************************************************************************************************************************

#ifndef ACL_HDBASTROMETRY_H
#define ACL_HDBASTROMETRY_H

#include "HDBBinTable.h"
#include "Observation.h"

  // Standard library files

#include <cstddef>
#include <list>
#include <memory>
#include <vector>

  // MCL library

#include <MCL>

namespace ACL
{
  typedef std::list<SPAstrometryObservation> DAstrometryObservationStore;

    /// Class to store the astrometry information in HDB.

    /// This class allows the astrometry related information to be stored in a HDB (HDU) for saving to an external disk file.

  class CHDBAstrometry : public CHDBBinTable
  {
  private:
    DAstrometryObservationStore astrometryObservations;
    DAstrometryObservationStore::iterator astrometryObservationsIterator;

    virtual void loadKeywordPlateConstant(PFITSKeyword);

  protected:
    virtual bool specialKeyword(PFITSKeyword);

  public:
    CHDBAstrometry(CAstroFile *);
    explicit CHDBAstrometry(CHDBAstrometry const &);
    virtual ~CHDBAstrometry();

    virtual PHDB createCopy() const;

      // Information functions

    virtual EBlockType HDBType() const { return HDB_ASTROMETRY; }

     // FITS file functions

    virtual void readFromFITS(fitsfile *);
    virtual void writeToFITS(fitsfile *);

      // Image manipulation functions

    virtual void imageFlip();
    virtual void imageFlop();
    virtual void imageRotate(FP_t);
    virtual void imageFloat(boost::tuple<AXIS_t, AXIS_t> const &, boost::tuple<AXIS_t, AXIS_t> const &);
    virtual void imageResample(AXIS_t, AXIS_t);
    virtual void binPixels(unsigned int);
    virtual void imageTransform(MCL::TPoint2D<FP_t> const &, MCL::TPoint2D<FP_t> const &, FP_t, FP_t, MCL::TPoint2D<FP_t> const &, std::unique_ptr<bool> &);
    virtual void imageCrop(MCL::TPoint2D<FP_t> origen, MCL::TPoint2D<FP_t> dims);
    virtual FP_t imageExposure() const { ACL_CODE_ERROR; }

      // Astrometry functions

    virtual size_t astrometryObjectCount() const;
    virtual bool astrometryObjectAdd(SPAstrometryObservation);
    virtual bool astrometryObjectRemove(std::string const &);
    virtual void astrometryObjectRemoveAll();
    virtual void astrometryCalculatePlateConstants();
    virtual bool astrometryCheckRequisites() const;

      // Iteration functions

    virtual SPAstrometryObservation astrometryObjectFirst();
    virtual SPAstrometryObservation astrometryObjectNext();
  };

  typedef std::shared_ptr<CHDBAstrometry> PHDBAstrometry;
}

#endif // ACL_HDBASTROMETRY_H
