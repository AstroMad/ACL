//*********************************************************************************************************************************
//
// PROJECT:							Astronomy Class Library
// FILE:								CHDBAstrometry
// SUBSYSTEM:						Astronomical HDB classes
// LANGUAGE:						C++
// TARGET OS:						None.
// LIBRARY DEPENDANCE:	SCL, cfitsio, boost.
// NAMESPACE:						ACL
// AUTHOR:							Gavin Blakeman (GGB)
// LICENSE:             GPLv2
//
//                      Copyright 2011-2018 Gavin Blakeman.
//                      This file is part of the Astronomy Class Library (ACL)
//
//                      ACL is free software: you can redistribute it and/or modify it under the terms of the GNU General
//                      Public License as published by the Free Software Foundation, either version 2 of the License, or
//                      (at your option) any later version.
//
//                      ACL is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
//                      implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
//                      for more details.
//
//                      You should have received a copy of the GNU General Public License along with ACL.  If not,
//                      see <http://www.gnu.org/licenses/>.
//
// OVERVIEW:						A number of classes supporting file IO of astronomical data including images.
//											The classes are designed to present a single interface to the other astro library
//											classes while supporting several different file types.
//
//											File types supported for input are:   FITS
//																								            SBIG image files
//                                                            DNG Files
//                                                            RAW Files
//                      File types supported for output are": FITS
//
//                      The CAstroFile class is modelled around the FITS file format and is designed to work seamlessly with FITS
//                      files. While opening other types of files is supported, some information will be created on the fly.
//                      To ensure that all information generated by image manipulation is saved correctly, the information must
//                      be saved in the FITS format. Information will be lost if it is saved in any other format.
//
//                      The CAstroFile class also provides some observation management functionality as there are keywords that
//                      are automatically linked to observation information.
//
//
// CLASSES INCLUDED:		CAstrometryHDB  - Class to encapsulate Astrometry Data
//
// CLASS HIERARCHY:     CHDB
//                        - CImageHDB
//                        - CHDBAsciiTable
//                          - CHDBAstrometry
//                          - CHDBPhotometry
//                        - CHDBBinTable
//
// HISTORY:             2015-09-22 GGB - astroManager 2015.09 release
//                      2013-03-22 GGB - astroManager 2013.03 release.
//                      2013-02-01 GGB - Moved class from HDB.h
//
//*********************************************************************************************************************************

#include "../include/HDBAstrometry.h"

#include "../include/AstroFile.h"
#include "../include/AstroImageFunctions.hpp"

  // Boost library

#include "boost/assign.hpp"

namespace ACL
{

  //std::vector<CCfits::ValueType> colType = boost::assign::list_of(CCfits::Tstring)(CCfits::Tdouble)(CCfits::Tdouble)(CCfits::Tdouble)(CCfits::Tdouble);
  std::vector<std::string> colNames = boost::assign::list_of("OBJECT NAME")("CCD (X)")("CCD (Y)")("RA")("DEC");
  std::vector<int> colWidth = boost::assign::list_of(40)(1)(1)(1)(1);

  char *tunit[] = {(""), ("pixels"), ("pixels"), ("dd.ddd"), ("dd.ddd")};

  //*******************************************************************************************************************************
  //
  // class CHDBAstrometry
  //
  //*******************************************************************************************************************************

  /// @brief Default constructor.
  /// @param[in] aParent - The new parent object.
  /// @throws None.
  /// @details Initialise all variables to reasonable default values,
  /// @version 2011-11-25/GGB - Function created.

  CHDBAstrometry::CHDBAstrometry(CAstroFile *aParent) : CHDBBinTable(aParent, astroManager_HDB_ASTROMETRY),
    astrometryObservationsIterator(astrometryObservations.begin())
  {
  }

  /// @brief Copy constructor
  /// @param[in] toCopy - The instance to copy to this.
  /// @throws None.
  /// @version 2013-06-08/GGB - Function created.

  CHDBAstrometry::CHDBAstrometry(CHDBAstrometry const &toCopy) : CHDBBinTable(toCopy)
  {
    DAstrometryObservationStore::const_iterator iterator;

    for (iterator = toCopy.astrometryObservations.begin(); iterator != toCopy.astrometryObservations.end(); ++iterator)
    {
      SPAstrometryObservation newObservation(std::dynamic_pointer_cast<CAstrometryObservation>((*iterator)->createCopy()) );

      astrometryObservations.push_back(newObservation);
    };
  }

  /// @brief Class destructor.
  /// @throws None.
  /// @details Ensure all dynamically allocated memory is released.
  /// @version 2013-02-01/GGB - Function created.

  CHDBAstrometry::~CHDBAstrometry()
  {
  }

  /// @brief Passthrough function to calculate the plate constants.
  //
  // 2012-01-13/GGB - Function created.

  void CHDBAstrometry::astrometryCalculatePlateConstants()
  {
    //astrometry.calculatePlateConstants();
  }

  /// @brief Passthrough function to check the plate constant calculation requisites.
  /// @throws None.
  /// @version 2012-01-13/GGB - Function created.

  bool CHDBAstrometry::astrometryCheckRequisites() const
  {
    //return astrometry.checkRequisites();
    return false;
  }

  /// @brief Adds a new reference to the list.
  /// @returns true - object added to the list.
  /// @returns false - object already exists and was not added.
  /// @throws None.
  /// @note The list is first checked for duplicates.
  /// @version 2015-09-03/GGB - Updated to use C++14 library functions.
  /// @version 2013-03-15/GGB - Updated function to use iterator and store information in this object.
  /// @version 2011-12-11/GGB - Function created.

  bool CHDBAstrometry::astrometryObjectAdd(SPAstrometryObservation toAdd)
  {
      // Check for duplicates.

    if (!std::any_of(astrometryObservations.begin(), astrometryObservations.end(),
                    [&] (SPAstrometryObservation ao) {return (ao->objectName() == toAdd->objectName());}))
    {
      astrometryObservations.push_back(toAdd);
      NAXISn(2, astrometryObservations.size() );
      return true;
    }
    else
    {
      return false;
    }
  }

  /// @brief Returns the number of astrometryObjects currently stored.
  /// @returns The number of astrometry observations.
  /// @throws None.
  /// @version 2013-08-03/GGB - Function created.

  size_t CHDBAstrometry::astrometryObjectCount() const
  {
    return astrometryObservations.size();
  }

  /// @brief Moves the iterator to the first item and returns the value.
  //
  // 2013-03-15/GGB - Updated function to use iterator and store information in this object.
  // 2012-01-21/GGB - Function created.

  SPAstrometryObservation CHDBAstrometry::astrometryObjectFirst()
  {
    astrometryObservationsIterator = astrometryObservations.begin();
    if (astrometryObservations.begin() != astrometryObservations.end())
      return (*astrometryObservationsIterator);
    else
      return SPAstrometryObservation();
  }

  /// Moves the iterator to the next item and return.
  //
  // 2013-03-15/GGB - Updated function to use iterator and store information in this object.
  // 2012-01-21/GGB - Function created.

  SPAstrometryObservation CHDBAstrometry::astrometryObjectNext()
  {
    if (astrometryObservationsIterator != astrometryObservations.end() )
    {
      astrometryObservationsIterator++;
     if (astrometryObservationsIterator != astrometryObservations.end() )
       return *astrometryObservationsIterator;
     else
       return SPAstrometryObservation();
    }
    else
      return SPAstrometryObservation();
  }

  /// Removes a reference object from the list.
  /// RETURNS: true - object found and removed.
  //          false - object not found and not removed.
  //
  // 2013-08-29/GGB - Added code to update value of NAXISn(2) (Bug #1213104)
  // 2013-08-11/GGB - Updated function to reflect the new storage class.
  // 2011-12-11/GGB - Function created.

  bool CHDBAstrometry::astrometryObjectRemove(std::string const &toRemove)
  {
    DAstrometryObservationStore::iterator iterator = astrometryObservations.begin();

    while ( (iterator != astrometryObservations.end()) && (*(*iterator) != toRemove) )
    {
      ++iterator;
    }

    if (iterator != astrometryObservations.end())
    {
      astrometryObservations.erase(iterator);
      NAXISn(2, astrometryObservations.size() );
      return true;
    }
    else
    {
      return false;
    };
  }

  /// @brief Remove all the objects in the astrometry list.
  /// @throws None.
  /// @version 2013-08-29/GGB - Added code to update value of NAXISn(2) (Bug #1213104)
  /// @version 2013-06-18/GGB - Function created.

  void CHDBAstrometry::astrometryObjectRemoveAll()
  {
    astrometryObservations.clear();
    NAXISn(2, astrometryObservations.size() );
  }

  /// @brief Create a copy of *this.
  /// @returns A copy of this.
  /// @throws None.
  /// @version 2013-06-08/GGB - Function created.

  PHDB CHDBAstrometry::createCopy() const
  {
    PHDB returnValue(new CHDBAstrometry(*this));

    return returnValue;
  }

  /// @brief Mirror image around y-axis, the list of targets and references must also be flipped.
  /// @throws None.
  /// @version 2015-09-03/GGB - Use C++14 library functions.
  /// @version 2013-03-17/GGB - Updated to storage in this class.
  /// @version 2012-01-21/GGB - Function created.

  void CHDBAstrometry::imageFlip()
  {
    std::for_each(astrometryObservations.begin(), astrometryObservations.end(),
                  [&] (SPAstrometryObservation ao) {ao->CCDCoordinates(ACL::imageFlip(ao->CCDCoordinates(), parent_->imageHeight(0)));});
  }

  /// @brief Mirror image around x-axis, the list of targets and references must also be flopped.
  /// @throws None.
  /// @version 2015-09-03/GGB - Use C++14 library functions.
  /// @version 2013-03-17/GGB - Updated to storage in this class.
  /// @version 2012-01-21/GGB - Function created.

  void CHDBAstrometry::imageFlop()
  {
    std::for_each(astrometryObservations.begin(), astrometryObservations.end(),
                  [&] (SPAstrometryObservation ao) {ao->CCDCoordinates(ACL::imageFlop(ao->CCDCoordinates(), parent_->imageHeight(0)));});
  }

  /// @brief Loads the HDB from the FITS HDB. All the keywords and data are loaded.
  /// @param[in] file - Pointer to the FITS file to load from.
  /// @throws 0x1905 - HDB: Cannot dynamic_cast to AsciiTable.
  /// @version 2015-08-11/GGB - Converted to use cfitsio.
  /// @version 2013-08-29/GGB - Added code for when there are no objects in the HDU. (Bug #1213104)
  /// @version 2013-03-13/GGB - Changed parameter to pointer.
  /// @version 2012-01-21/GGB - Function created.

  void CHDBAstrometry::readFromFITS(fitsfile *file)
  {
    RUNTIME_ASSERT(ACL, file != nullptr, "Paramter file cannnot be nullptr");

    std::vector<std::string> objectNames;
    std::vector<FP_t> CCDX;
    std::vector<FP_t> CCDY;
    std::vector<FP_t> RA;
    std::vector<FP_t> DEC;
    std::vector<std::string>::size_type columnIndex = 0;
    DAstrometryObservationStore::size_type index;
    SPAstrometryObservation newRecord;

    CHDBBinTable::readFromFITS(file);   // Call the parent to load all the common stuff as well as the keywords.

    if ( NAXISn(2) > 0 )
    {
//      CCfits::BinTable *bhdu = dynamic_cast<CCfits::BinTable *>(hdu);   // Cast to the correct type of table.

//      if (bhdu)
//      {


        // Load the table data now.

//        bhdu->column(colNames[columnIndex++]).read(objectNames, 1, NAXISn(2));
//        bhdu->column(colNames[columnIndex++]).read(CCDX, 1, NAXISn(2));
//        bhdu->column(colNames[columnIndex++]).read(CCDY, 1, NAXISn(2));
//        bhdu->column(colNames[columnIndex++]).read(RA, 1, NAXISn(2));
//        bhdu->column(colNames[columnIndex++]).read(DEC, 1, NAXISn(2));

        // Now construct the objects.

//        for (index = 0; index < objectNames.size(); index++)
//        {
//          newRecord.reset(new CAstrometryObservation(objectNames[index]));

//          newRecord->CCDCoordinates(MCL::TPoint2D<FP_t>(CCDX[index], CCDY[index]));
//          newRecord->observedCoordinates(CAstronomicalCoordinates(RA[index], DEC[index]));

//          astrometryObservations.push_back(newRecord);
//        };
//      }
  //    else
//        ACL_ERROR(0x1905);    // HDB: Cannot dynamic_cast to AsciiTable.
    };
  }

  // Sets the relevant plate constants.
  //
  // 2011-12-20/GGB - Function created.

  void CHDBAstrometry::loadKeywordPlateConstant(PFITSKeyword kwd)
  {
    /*double value = (double) (*kwd);

    if ( (*kwd) == astroManager_COMMENT_PLATE_FL )
    {
      plateData.F = value;
      pcFlag |= 0x01;
    }
    else if ( (*kwd) == astroManager_COMMENT_PLATE_A )
    {
      plateData.a = value;
      pcFlag |= 0x02;
    }
    else if ( (*kwd) == astroManager_COMMENT_PLATE_B )
    {
      plateData.b = value;
      pcFlag |= 0x04;
    }
    else if ( (*kwd) == astroManager_COMMENT_PLATE_C )
    {
      plateData.c = value;
      pcFlag |= 0x08;
    }
    else if ( (*kwd) == astroManager_COMMENT_PLATE_D )
    {
      plateData.d = value;
      pcFlag |= 0x10;
    }
    else if ( (*kwd) == astroManager_COMMENT_PLATE_E )
    {
      plateData.e = value;
      pcFlag |= 0x20;
    }
    else if ( (*kwd) == astroManager_COMMENT_PLATE_F )
    {
      plateData.f = value;
      pcFlag |= 0x40;
    }
    else
      ACL_CODE_ERROR;*/

  }

  /// @brief Function for rotating an image.
  /// @param[in] theta - Rotation angle (radians)
  /// @throws None.
  /// @details Ensures that the ccd coordinates are rotated in the astrometry object.
  /// @version 2013-03-17/GGB - Updated to storage in this class.
  /// @version 2012-01-13/GGB - Function created

  void CHDBAstrometry::imageRotate(FP_t theta)
  {
    DAstrometryObservationStore::iterator iterator;

    for (iterator = astrometryObservations.begin(); iterator != astrometryObservations.end(); iterator++)
      (*iterator)->CCDCoordinates(ACL::imageRotate(MCL::TPoint2D<double>(0, 0), (*iterator)->CCDCoordinates(), theta));
  }

  /// Updates the coordinates when the image is floated.
  //
  // 2013-03-17/GGB - Function created.

  void CHDBAstrometry::imageFloat(boost::tuple<AXIS_t, AXIS_t> const &oldDim, boost::tuple<AXIS_t, AXIS_t> const &newDim)
  {
    DAstrometryObservationStore::iterator iterator;

    for (iterator = astrometryObservations.begin(); iterator != astrometryObservations.end(); iterator++)
      (*iterator)->CCDCoordinates(ACL::imageFloat((*iterator)->CCDCoordinates(), oldDim, newDim));
  }

  /// Updates all the coordinates to reflect that the image has been resampled.
  //
  // 2013-03-17/GGB - Function created.

  void CHDBAstrometry::imageResample(AXIS_t rx, AXIS_t ry)
  {
    DAstrometryObservationStore::iterator iterator;

    for (iterator = astrometryObservations.begin(); iterator != astrometryObservations.end(); iterator++)
      (*iterator)->CCDCoordinates(ACL::imageResample((*iterator)->CCDCoordinates(), rx, ry));
  }

  /// @brief Updates all the CCD coordinates with the recalculated coordinates based on the binning of the pixels.
  /// @param[in] p - The binning factor.
  /// @throws None.
  /// @version 2015-09-16/GGB - Updated to C++14
  /// @version 2013-03-17/GGB - Function created.

  void CHDBAstrometry::binPixels(unsigned int p)
  {
    std::for_each(astrometryObservations.begin(), astrometryObservations.end(),
                  [&] (SPAstrometryObservation ao) { ao->CCDCoordinates(ACL::imageBinPixels(ao->CCDCoordinates(), p));});
  }

  /// @brief Updates all the coordinates when an image is transformed (TRS)
  /// @throws None.
  /// @version 2015-09-16/GGB - Use C++14 function std::for_each
  /// @version 2013-03-17/GGB - Function created.

  void CHDBAstrometry::imageTransform(MCL::TPoint2D<FP_t> const &center, MCL::TPoint2D<FP_t> const &ct, FP_t angle,
                                      FP_t scale, MCL::TPoint2D<FP_t> const &pixelSize, std::unique_ptr<bool> &)
  {
    std::for_each(astrometryObservations.begin(), astrometryObservations.end(),
                  [&] (SPAstrometryObservation ao) { ao->CCDCoordinates(ACL::imageTransformForward(ao->CCDCoordinates(),
                                                                                                  center, ct, angle, scale,
                                                                                                  pixelSize));});
  }

  /// @brief Performs a crop function on the astrometry data
  /// @param[in] origen - The origen of the crop (bottom left)
  /// @param[in] dims - The dimensions of the final image.
  /// @throws None.
  /// @version 2015-09-19/GGB - Function created.

  void CHDBAstrometry::imageCrop(MCL::TPoint2D<FP_t> origin, MCL::TPoint2D<FP_t> dims)
  {
    DAstrometryObservationStore::iterator iter;

    for (iter =  astrometryObservations.begin(); iter != astrometryObservations.end(); iter++)
    {
      boost::optional<MCL::TPoint2D<FP_t> > temp = ACL::imageCrop( (*iter)->CCDCoordinates(), origin, dims);
      if (temp)
      {
        (*iter)->CCDCoordinates() = *temp;
      }
      else
      {
          // Delete the observation as it falls outside of the new image.

        astrometryObservations.erase(iter);
      };
    };
  }

  /// @brief Checks if the keyword being loaded is a special keyword.
  /// @returns true - The keyword is a special keyword
  /// @returns false - The keyword is not a special keyword
  /// @throws None.
  /// @details If the keyword is a special keyword, then the appropriate handler is called to manage the loading of the keyword.
  /// @version 2011-12-20/GGB - Function created.

  bool CHDBAstrometry::specialKeyword(PFITSKeyword kwd)
  {
    if ( ((*kwd) == astroManager_COMMENT_PLATE_FL) ||
         ((*kwd) == astroManager_COMMENT_PLATE_A) ||
         ((*kwd) == astroManager_COMMENT_PLATE_B) ||
         ((*kwd) == astroManager_COMMENT_PLATE_C) ||
         ((*kwd) == astroManager_COMMENT_PLATE_D) ||
         ((*kwd) == astroManager_COMMENT_PLATE_E) ||
         ((*kwd) == astroManager_COMMENT_PLATE_F) )
    {
      loadKeywordPlateConstant(kwd);
      return true;
    }
    else
    {
      return CHDBBinTable::specialKeyword(kwd);
    };
  }

  /// @brief Function to write data to the FITS file.
  /// @param[in] file - The FITS file to write to.
  /// The data relevant to the astrometry HDB must be written. The CHDB::writeToFITS
  /// function must also be called to ensure that the keywords are correctly written to the FITS file.
  //
  // 2013-03-15/GGB - Updated to manage information directly.
  // 2012-01-16/GGB - Function created.

  void CHDBAstrometry::writeToFITS(fitsfile *file)
  {
      RUNTIME_ASSERT(ACL, file != nullptr, "Parameter file cannot be nullptr");

    std::vector<std::string> objectNames;
    std::vector<FP_t> CCDX;
    std::vector<FP_t> CCDY;
    std::vector<FP_t> RA;
    std::vector<FP_t> DEC;
    std::vector<std::string>::size_type columnIndex = 0;
    DAstrometryObservationStore::iterator iterator;
    std::vector<std::string>::size_type index;

    //CFITSIO_TEST(fits_insert_btbl(file, LONGLONG(0)))

//    CCfits::BinTable *bhdu = dynamic_cast<CCfits::BinTable *>(hdu);

//    if (bhdu)
//    {
//      for (iterator = astrometryObservations.begin(); iterator != astrometryObservations.end(); iterator++)
//      {
//        objectNames.push_back((*iterator)->objectName());
//        CCDX.push_back((*iterator)->CCDCoordinates().x());
//        CCDY.push_back((*iterator)->CCDCoordinates().y());
//        if ( (*iterator)->observedCoordinates() )
//          RA.push_back( (*(*iterator)->observedCoordinates()).RA(true));
//        else
//          RA.push_back(0);
//        if ( (*iterator)->observedCoordinates() )
//          DEC.push_back( (*(*iterator)->observedCoordinates()).Dec(true));
//        else
//          DEC.push_back(0);
//      };

//      CHDBBinTable::writeToFITS(hdu);

//      for (index = 0; index < colNames.size(); index++)
//        bhdu->addColumn(colType[index], colNames[index], colWidth[index], colUnit[index]);

//      bhdu->column(colNames[columnIndex++]).write(objectNames, 1);
//      bhdu->column(colNames[columnIndex++]).write(CCDX, 1);
//      bhdu->column(colNames[columnIndex++]).write(CCDY, 1);
//      bhdu->column(colNames[columnIndex++]).write(RA, 1);
//      bhdu->column(colNames[columnIndex++]).write(DEC, 1);
//    }
//    else
//      ACL_ERROR(0x190C);
  }

}  // namespace ACL
